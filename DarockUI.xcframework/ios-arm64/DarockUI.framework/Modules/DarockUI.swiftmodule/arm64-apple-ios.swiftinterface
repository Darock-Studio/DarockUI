// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.3 effective-5.10 (swiftlang-6.0.3.1.10 clang-1600.0.30.1)
// swift-module-flags: -target arm64-apple-ios16.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name DarockUI
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
@_exported import DarockUI
import Foundation
import Swift
import SwiftUI
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
extension SwiftUICore.Color {
  public struct Neumorphic {
    public static var colorSchemeType: DarockUI.NeumorphicKit.ColorSchemeType {
      get
      set
    }
    public static var main: SwiftUICore.Color {
      get
    }
    public static var secondary: SwiftUICore.Color {
      get
    }
    public static var lightShadow: SwiftUICore.Color {
      get
    }
    public static var darkShadow: SwiftUICore.Color {
      get
    }
  }
}
public struct NeumorphicKit {
  public enum ColorSchemeType {
    case auto, light, dark
    public static func == (a: DarockUI.NeumorphicKit.ColorSchemeType, b: DarockUI.NeumorphicKit.ColorSchemeType) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public static var colorSchemeType: DarockUI.NeumorphicKit.ColorSchemeType
  public typealias ColorType = UIKit.UIColor
  public static func colorType(red: CoreFoundation.CGFloat, green: CoreFoundation.CGFloat, blue: CoreFoundation.CGFloat) -> DarockUI.NeumorphicKit.ColorType
  public static func color(light: DarockUI.NeumorphicKit.ColorType, dark: DarockUI.NeumorphicKit.ColorType) -> SwiftUICore.Color
}
public enum SoftButtonPressedEffect {
  case none
  case flat
  case hard
  public static func == (a: DarockUI.SoftButtonPressedEffect, b: DarockUI.SoftButtonPressedEffect) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_Concurrency.MainActor @preconcurrency public struct SoftDynamicButtonStyle<S> : SwiftUI.ButtonStyle where S : SwiftUICore.Shape {
  @_Concurrency.MainActor @preconcurrency public init(_ shape: S, mainColor: SwiftUICore.Color, textColor: SwiftUICore.Color, darkShadowColor: SwiftUICore.Color, lightShadowColor: SwiftUICore.Color, pressedEffect: DarockUI.SoftButtonPressedEffect, padding: CoreFoundation.CGFloat = 16)
  @_Concurrency.MainActor @preconcurrency public func makeBody(configuration: DarockUI.SoftDynamicButtonStyle<S>.Configuration) -> some SwiftUICore.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s8DarockUI22SoftDynamicButtonStyleV8makeBody13configurationQr05SwiftB00eF13ConfigurationV_tF", 0) __<S>
}
@available(*, deprecated, message: "Use SoftDynamicButtonStyle instead")
@_Concurrency.MainActor @preconcurrency public struct SoftButtonStyle<S> : SwiftUI.ButtonStyle where S : SwiftUICore.Shape {
  @_Concurrency.MainActor @preconcurrency public init(_ shape: S, mainColor: SwiftUICore.Color, textColor: SwiftUICore.Color, darkShadowColor: SwiftUICore.Color, lightShadowColor: SwiftUICore.Color)
  @_Concurrency.MainActor @preconcurrency public func makeBody(configuration: DarockUI.SoftButtonStyle<S>.Configuration) -> some SwiftUICore.View
  
  @available(*, deprecated, message: "Use SoftDynamicButtonStyle instead")
  public typealias Body = @_opaqueReturnTypeOf("$s8DarockUI15SoftButtonStyleV8makeBody13configurationQr05SwiftB00dE13ConfigurationV_tF", 0) __<S>
}
extension SwiftUI.Button {
  public func softButtonStyle<S>(_ content: S, padding: CoreFoundation.CGFloat = 16, mainColor: SwiftUICore.Color = Color.Neumorphic.main, textColor: SwiftUICore.Color = Color.Neumorphic.secondary, darkShadowColor: SwiftUICore.Color = Color.Neumorphic.darkShadow, lightShadowColor: SwiftUICore.Color = Color.Neumorphic.lightShadow, pressedEffect: DarockUI.SoftButtonPressedEffect = .hard) -> some SwiftUICore.View where S : SwiftUICore.Shape
  
}
extension SwiftUI.NavigationLink {
  public func softNavigationLinkStyle<S>(_ content: S, padding: CoreFoundation.CGFloat = 16, mainColor: SwiftUICore.Color = Color.Neumorphic.main, textColor: SwiftUICore.Color = Color.Neumorphic.secondary, darkShadowColor: SwiftUICore.Color = Color.Neumorphic.darkShadow, lightShadowColor: SwiftUICore.Color = Color.Neumorphic.lightShadow, pressedEffect: DarockUI.SoftButtonPressedEffect = .hard) -> some SwiftUICore.View where S : SwiftUICore.Shape
  
}
@_Concurrency.MainActor @preconcurrency public struct SoftDynamicToggleStyle<S> : SwiftUI.ToggleStyle where S : SwiftUICore.Shape {
  @_Concurrency.MainActor @preconcurrency public init(_ shape: S, mainColor: SwiftUICore.Color, textColor: SwiftUICore.Color, darkShadowColor: SwiftUICore.Color, lightShadowColor: SwiftUICore.Color, pressedEffect: DarockUI.SoftButtonPressedEffect, padding: CoreFoundation.CGFloat = 16)
  @_Concurrency.MainActor @preconcurrency public func makeBody(configuration: DarockUI.SoftDynamicToggleStyle<S>.Configuration) -> some SwiftUICore.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s8DarockUI22SoftDynamicToggleStyleV8makeBody13configurationQr05SwiftB00eF13ConfigurationV_tF", 0) __<S>
}
@_Concurrency.MainActor @preconcurrency public struct SoftSwitchToggleStyle : SwiftUI.ToggleStyle {
  @_Concurrency.MainActor @preconcurrency public func makeBody(configuration: DarockUI.SoftSwitchToggleStyle.Configuration) -> some SwiftUICore.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s8DarockUI21SoftSwitchToggleStyleV8makeBody13configurationQr05SwiftB00eF13ConfigurationV_tF", 0) __
}
extension SwiftUI.Toggle {
  public func softToggleStyle<S>(_ content: S, padding: CoreFoundation.CGFloat = 16, mainColor: SwiftUICore.Color = Color.Neumorphic.main, textColor: SwiftUICore.Color = Color.Neumorphic.secondary, darkShadowColor: SwiftUICore.Color = Color.Neumorphic.darkShadow, lightShadowColor: SwiftUICore.Color = Color.Neumorphic.lightShadow, pressedEffect: DarockUI.SoftButtonPressedEffect = .hard) -> some SwiftUICore.View where S : SwiftUICore.Shape
  
  public func softSwitchToggleStyle(tint: SwiftUICore.Color = .green, offTint: SwiftUICore.Color = Color.Neumorphic.main, mainColor: SwiftUICore.Color = Color.Neumorphic.main, darkShadowColor: SwiftUICore.Color = Color.Neumorphic.darkShadow, lightShadowColor: SwiftUICore.Color = Color.Neumorphic.lightShadow, labelsHidden: Swift.Bool = false) -> some SwiftUICore.View
  
}
extension SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public func softInnerShadow<S>(_ content: S, darkShadow: SwiftUICore.Color = Color.Neumorphic.darkShadow, lightShadow: SwiftUICore.Color = Color.Neumorphic.lightShadow, spread: CoreFoundation.CGFloat = 0.5, radius: CoreFoundation.CGFloat = 10) -> some SwiftUICore.View where S : SwiftUICore.Shape
  
}
extension SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public func softOuterShadow(darkShadow: SwiftUICore.Color = Color.Neumorphic.darkShadow, lightShadow: SwiftUICore.Color = Color.Neumorphic.lightShadow, offset: CoreFoundation.CGFloat = 6, radius: CoreFoundation.CGFloat = 3) -> some SwiftUICore.View
  
}
public func NeuInput(_ placeholder: Swift.String, icon: Swift.String, text: SwiftUICore.Binding<Swift.String>, password: Swift.Bool = false, paddings: [CoreFoundation.CGFloat] = [5, 20], noAutoInput: Swift.Bool = false) -> some SwiftUICore.View

public func NeuButton(action: @escaping () -> Swift.Void, label: SwiftUICore.LocalizedStringKey, icon: Swift.String? = nil, cornerRadius: CoreFoundation.CGFloat = 18, paddings: [CoreFoundation.CGFloat] = [5, 20], fontSize: CoreFoundation.CGFloat = 22, fontWeight: SwiftUICore.Font.Weight = .bold, width: CoreFoundation.CGFloat? = nil) -> some SwiftUICore.View

@_disfavoredOverload public func NeuButton(action: @escaping () -> Swift.Void, label: Swift.String, icon: Swift.String? = nil, cornerRadius: CoreFoundation.CGFloat = 18, paddings: [CoreFoundation.CGFloat] = [5, 20], fontSize: CoreFoundation.CGFloat = 22, fontWeight: SwiftUICore.Font.Weight = .bold, width: CoreFoundation.CGFloat? = nil) -> some SwiftUICore.View

public func NeuButton(action: @escaping () -> Swift.Void, label: () -> some View, cornerRadius: CoreFoundation.CGFloat = 18, paddings: [CoreFoundation.CGFloat] = [5, 20], fontSize: CoreFoundation.CGFloat = 22, fontWeight: SwiftUICore.Font.Weight = .bold, width: CoreFoundation.CGFloat? = nil) -> some SwiftUICore.View

public func NStack(_ main: () -> some View) -> some SwiftUICore.View

public func NeuText(_ text: SwiftUICore.LocalizedStringKey, fontSize: CoreFoundation.CGFloat = 22) -> some SwiftUICore.View

@_disfavoredOverload public func NeuText(_ text: Swift.String, fontSize: CoreFoundation.CGFloat = 22) -> some SwiftUICore.View

public func NeuProgressView(value: Swift.Float, total: Swift.Float = 1.0, foregroundColor fc: SwiftUICore.Color = .blue, width: CoreFoundation.CGFloat? = 200, height: CoreFoundation.CGFloat? = 15) -> some SwiftUICore.View

public func NeuToggle(_ titleKey: SwiftUICore.LocalizedStringKey, isOn: SwiftUICore.Binding<Swift.Bool>, tint: SwiftUICore.Color = .green) -> some SwiftUICore.View

@_disfavoredOverload public func NeuToggle(isOn: SwiftUICore.Binding<Swift.Bool>, label: () -> some View, tint: SwiftUICore.Color = .green) -> some SwiftUICore.View

public func NeuNavigationLink(@SwiftUICore.ViewBuilder destination: () -> some View, @SwiftUICore.ViewBuilder label: () -> some View, cornerRadius: CoreFoundation.CGFloat = 18, paddings: [CoreFoundation.CGFloat] = [5, 20], width: CoreFoundation.CGFloat? = nil) -> some SwiftUICore.View

#if compiler(>=5.3) && $RetroactiveAttribute
extension Swift.Int : @retroactive Swift.Identifiable {
  public var id: Swift.Int {
    get
  }
  public typealias ID = Swift.Int
}
#else
extension Swift.Int : Swift.Identifiable {
  public var id: Swift.Int {
    get
  }
  public typealias ID = Swift.Int
}
#endif
#if compiler(>=5.3) && $RetroactiveAttribute
extension Swift.Int8 : @retroactive Swift.Identifiable {
  public var id: Swift.Int8 {
    get
  }
  public typealias ID = Swift.Int8
}
#else
extension Swift.Int8 : Swift.Identifiable {
  public var id: Swift.Int8 {
    get
  }
  public typealias ID = Swift.Int8
}
#endif
#if compiler(>=5.3) && $RetroactiveAttribute
extension Swift.Int16 : @retroactive Swift.Identifiable {
  public var id: Swift.Int16 {
    get
  }
  public typealias ID = Swift.Int16
}
#else
extension Swift.Int16 : Swift.Identifiable {
  public var id: Swift.Int16 {
    get
  }
  public typealias ID = Swift.Int16
}
#endif
#if compiler(>=5.3) && $RetroactiveAttribute
extension Swift.Int32 : @retroactive Swift.Identifiable {
  public var id: Swift.Int32 {
    get
  }
  public typealias ID = Swift.Int32
}
#else
extension Swift.Int32 : Swift.Identifiable {
  public var id: Swift.Int32 {
    get
  }
  public typealias ID = Swift.Int32
}
#endif
#if compiler(>=5.3) && $RetroactiveAttribute
extension Swift.Int64 : @retroactive Swift.Identifiable {
  public var id: Swift.Int64 {
    get
  }
  public typealias ID = Swift.Int64
}
#else
extension Swift.Int64 : Swift.Identifiable {
  public var id: Swift.Int64 {
    get
  }
  public typealias ID = Swift.Int64
}
#endif
#if compiler(>=5.3) && $RetroactiveAttribute
@available(iOS 18.0, watchOS 11.0, macOS 15.0, visionOS 2.0, *)
extension Swift.Int128 : @retroactive Swift.Identifiable {
  public var id: Swift.Int128 {
    get
  }
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  public typealias ID = Swift.Int128
}
#else
@available(iOS 18.0, watchOS 11.0, macOS 15.0, visionOS 2.0, *)
extension Swift.Int128 : Swift.Identifiable {
  public var id: Swift.Int128 {
    get
  }
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  public typealias ID = Swift.Int128
}
#endif
#if compiler(>=5.3) && $RetroactiveAttribute
extension Swift.Float : @retroactive Swift.Identifiable {
  public var id: Swift.Float {
    get
  }
  public typealias ID = Swift.Float
}
#else
extension Swift.Float : Swift.Identifiable {
  public var id: Swift.Float {
    get
  }
  public typealias ID = Swift.Float
}
#endif
#if compiler(>=5.3) && $RetroactiveAttribute
extension Swift.Double : @retroactive Swift.Identifiable {
  public var id: Swift.Double {
    get
  }
  public typealias ID = Swift.Double
}
#else
extension Swift.Double : Swift.Identifiable {
  public var id: Swift.Double {
    get
  }
  public typealias ID = Swift.Double
}
#endif
#if compiler(>=5.3) && $RetroactiveAttribute
extension Swift.String : @retroactive Swift.Identifiable {
  public var id: Swift.String {
    get
  }
  public typealias ID = Swift.String
}
#else
extension Swift.String : Swift.Identifiable {
  public var id: Swift.String {
    get
  }
  public typealias ID = Swift.String
}
#endif
extension SwiftUICore.View {
  @inlinable @_Concurrency.MainActor @preconcurrency public func wrapIf(_ condition: Swift.Bool, @SwiftUICore.ViewBuilder in container: (Self) -> some View) -> some SwiftUICore.View {
        if condition {
            container(self)
        } else {
            self
        }
    }
  
  @inlinable @_Concurrency.MainActor @preconcurrency public func wrapIf(_ condition: Swift.Bool, @SwiftUICore.ViewBuilder in container: (Self) -> some View, @SwiftUICore.ViewBuilder else elseContainer: (Self) -> some View) -> some SwiftUICore.View {
        if condition {
            container(self)
        } else {
            elseContainer(self)
        }
    }
  
}
@inlinable public func ifContainer<T, U, V>(_ condition: Swift.Bool, @SwiftUICore.ViewBuilder true trueContainer: @escaping (SwiftUICore.AnyView) -> T, @SwiftUICore.ViewBuilder false falseContainer: @escaping (SwiftUICore.AnyView) -> U, @SwiftUICore.ViewBuilder containing containingView: @escaping () -> V) -> some SwiftUICore.View where T : SwiftUICore.View, U : SwiftUICore.View, V : SwiftUICore.View {
    if condition {
        trueContainer(.init(containingView()))
    } else {
        falseContainer(.init(containingView()))
    }
}

@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class AlertIconDoneView : UIKit.UIView, DarockUI.AlertIconAnimatable {
  @_Concurrency.MainActor @preconcurrency public func animate()
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class AlertIconErrorView : UIKit.UIView, DarockUI.AlertIconAnimatable {
  @_Concurrency.MainActor @preconcurrency public func animate()
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class AlertIconHeartView : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func draw(_ rect: CoreFoundation.CGRect)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class AlertAppleMusic16View : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency open var dismissByTap: Swift.Bool
  @_Concurrency.MainActor @preconcurrency open var dismissInTime: Swift.Bool
  @_Concurrency.MainActor @preconcurrency open var duration: Swift.Double
  @_Concurrency.MainActor @preconcurrency open var haptic: DarockUI.UIAlert.AlertHaptic?
  @_Concurrency.MainActor @preconcurrency public init(title: Swift.String?, subtitle: Swift.String?, icon: DarockUI.UIAlert.AlertIcon?, duration: Foundation.TimeInterval?)
  @_Concurrency.MainActor @preconcurrency open func present(on view: UIKit.UIView, completion: @escaping () -> Swift.Void = {})
  @objc @_Concurrency.MainActor @preconcurrency open func dismiss()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func layoutSubviews()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func sizeThatFits(_ size: CoreFoundation.CGSize) -> CoreFoundation.CGSize
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class AlertAppleMusic17View : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency open var dismissByTap: Swift.Bool
  @_Concurrency.MainActor @preconcurrency open var dismissInTime: Swift.Bool
  @_Concurrency.MainActor @preconcurrency open var duration: Swift.Double
  @_Concurrency.MainActor @preconcurrency open var haptic: DarockUI.UIAlert.AlertHaptic?
  @_Concurrency.MainActor @preconcurrency open var completion: (() -> Swift.Void)?
  @_Concurrency.MainActor @preconcurrency public init(title: Swift.String?, subtitle: Swift.String?, icon: DarockUI.UIAlert.AlertIcon?, duration: Foundation.TimeInterval?)
  @_Concurrency.MainActor @preconcurrency open func present(on view: UIKit.UIView, completion: @escaping () -> Swift.Void = {})
  @objc @_Concurrency.MainActor @preconcurrency open func dismiss()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func layoutSubviews()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func sizeThatFits(_ size: CoreFoundation.CGSize) -> CoreFoundation.CGSize
  @objc deinit
}
@available(*, deprecated, message: "'AlertKitAPI' has deprecated in DarockUI. Use NotifKit instead.")
public enum AlertKitAPI {
  public static func present(title: Swift.String? = nil, subtitle: Swift.String? = nil, icon: DarockUI.UIAlert.AlertIcon? = nil, style: DarockUI.UIAlert.AlertViewStyle, haptic: DarockUI.UIAlert.AlertHaptic? = nil, duration: Foundation.TimeInterval? = nil)
}
@_hasMissingDesignatedInitializers public class UIAlert {
  public enum AlertIcon : Swift.Equatable {
    case done
    case error
    case heart
    case spinnerSmall
    case spinnerLarge
    case custom(_: UIKit.UIImage)
    public static func == (a: DarockUI.UIAlert.AlertIcon, b: DarockUI.UIAlert.AlertIcon) -> Swift.Bool
  }
  public enum AlertViewStyle {
    case iOS16AppleMusic
    case iOS17AppleMusic
    public static func == (a: DarockUI.UIAlert.AlertViewStyle, b: DarockUI.UIAlert.AlertViewStyle) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum AlertHaptic {
    case success
    case warning
    case error
    case none
    public static func == (a: DarockUI.UIAlert.AlertHaptic, b: DarockUI.UIAlert.AlertHaptic) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public static var shared: DarockUI.UIAlert
  public func presentAlert(title: Swift.String, subtitle: Swift.String? = nil, icon: DarockUI.UIAlert.AlertIcon? = nil, style: DarockUI.UIAlert.AlertViewStyle? = nil, haptic: DarockUI.UIAlert.AlertHaptic? = nil, duration: Foundation.TimeInterval? = nil)
  @objc deinit
}
public protocol AlertIconAnimatable {
  func animate()
}
@_Concurrency.MainActor @preconcurrency public struct DelayedProgressView : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public init(delayInterval interval: Foundation.TimeInterval = 3)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s8DarockUI19DelayedProgressViewV4bodyQrvp", 0) __
}
public var kViewMinimumRenderableOpacity: Swift.Double {
  get
}
extension SwiftUICore.View {
  @inlinable @_Concurrency.MainActor @preconcurrency public func minimumRenderableOpacity() -> some SwiftUICore.View {
        opacity(kViewMinimumRenderableOpacity)
    }
  
}
extension SwiftUICore.View {
  @inlinable @_Concurrency.MainActor @preconcurrency public func onInitialAppear(perform action: (() -> Swift.Void)? = nil) -> some SwiftUICore.View {
        modifier(_InitialAppearModifier(perform: action))
    }
  
}
@_Concurrency.MainActor @preconcurrency public struct _InitialAppearModifier : SwiftUICore.ViewModifier {
  @_Concurrency.MainActor @preconcurrency public init(perform action: (() -> Swift.Void)? = nil)
  @_Concurrency.MainActor @preconcurrency public func body(content: DarockUI._InitialAppearModifier.Content) -> some SwiftUICore.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s8DarockUI22_InitialAppearModifierV4body7contentQr05SwiftB005_ViewE8_ContentVyACG_tF", 0) __
}
@available(iOS, unavailable)
@available(macOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct Menu<Label, Content> : SwiftUICore.View where Label : SwiftUICore.View, Content : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s8DarockUI4MenuV4bodyQrvp", 0) __<Label, Content>
}
@available(*, unavailable)
extension DarockUI.Menu : Swift.Sendable {
}
@available(iOS, unavailable)
@available(macOS, unavailable)
extension DarockUI.Menu {
  @_Concurrency.MainActor @preconcurrency public init(@SwiftUICore.ViewBuilder content: () -> Content, @SwiftUICore.ViewBuilder label: () -> Label)
  @_Concurrency.MainActor @preconcurrency public init(_ titleKey: SwiftUICore.LocalizedStringKey, @SwiftUICore.ViewBuilder content: () -> Content) where Label == SwiftUICore.Text
  @_disfavoredOverload @_Concurrency.MainActor @preconcurrency public init<S>(_ title: S, @SwiftUICore.ViewBuilder content: () -> Content) where Label == SwiftUICore.Text, S : Swift.StringProtocol
}
@available(iOS, unavailable)
@available(macOS, unavailable)
extension DarockUI.Menu where Label == SwiftUI.Label<SwiftUICore.Text, SwiftUICore.Image> {
  @_alwaysEmitIntoClient @_Concurrency.MainActor @preconcurrency public init(_ titleKey: SwiftUICore.LocalizedStringKey, systemImage: Swift.String, @SwiftUICore.ViewBuilder content: () -> Content) {
        self.init {
            content()
        } label: {
            Label(titleKey, systemImage: systemImage)
        }
    }
  @_alwaysEmitIntoClient @_disfavoredOverload @_Concurrency.MainActor @preconcurrency public init<S>(_ title: S, systemImage: Swift.String, @SwiftUICore.ViewBuilder content: () -> Content) where S : Swift.StringProtocol {
        self.init {
            content()
        } label: {
            Label(title, systemImage: systemImage)
        }
    }
}
@available(watchOS 10.0, *)
@available(iOS, unavailable)
@available(macOS, unavailable)
extension DarockUI.Menu where Label == SwiftUI.Label<SwiftUICore.Text, SwiftUICore.Image> {
  @available(iOS 17.0, macOS 14.0, *)
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  @_Concurrency.MainActor @preconcurrency public init(_ titleKey: SwiftUICore.LocalizedStringKey, image: DeveloperToolsSupport.ImageResource, @SwiftUICore.ViewBuilder content: () -> Content)
  @available(iOS 17.0, macOS 14.0, *)
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  @_disfavoredOverload @_Concurrency.MainActor @preconcurrency public init<S>(_ title: S, image: DeveloperToolsSupport.ImageResource, @SwiftUICore.ViewBuilder content: () -> Content) where S : Swift.StringProtocol
}
extension SwiftUICore.View {
  @available(watchOS 7.0, *)
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  @_Concurrency.MainActor @preconcurrency public func contextMenu<MenuItems>(@SwiftUICore.ViewBuilder menuItems: @escaping () -> MenuItems) -> some SwiftUICore.View where MenuItems : SwiftUICore.View
  
  @available(watchOS 7.0, *)
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  @_Concurrency.MainActor @preconcurrency public func contextMenu<M, P>(@SwiftUICore.ViewBuilder menuItems: @escaping () -> M, @SwiftUICore.ViewBuilder preview: () -> P) -> some SwiftUICore.View where M : SwiftUICore.View, P : SwiftUICore.View
  
}
extension SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public func centerAligned() -> some SwiftUICore.View
  
}
extension SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public func noAutoInput() -> some SwiftUICore.View
  
}
@_Concurrency.MainActor @preconcurrency public struct Zoomable : SwiftUICore.ViewModifier {
  @_Concurrency.MainActor @preconcurrency public init()
  @_Concurrency.MainActor @preconcurrency public func body(content: DarockUI.Zoomable.Content) -> some SwiftUICore.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s8DarockUI8ZoomableV4body7contentQr05SwiftB021_ViewModifier_ContentVyACG_tF", 0) __
}
@_Concurrency.MainActor @preconcurrency public struct WebView : SwiftUI.UIViewRepresentable {
  @_Concurrency.MainActor @preconcurrency public init(url: Foundation.URL)
  @_Concurrency.MainActor @preconcurrency public init(url: Foundation.URL, builder: @escaping (WebKit.WKWebView) -> WebKit.WKWebView)
  @_Concurrency.MainActor @preconcurrency public func makeUIView(context: DarockUI.WebView.Context) -> WebKit.WKWebView
  @_Concurrency.MainActor @preconcurrency public func updateUIView(_ uiView: WebKit.WKWebView, context: DarockUI.WebView.Context)
  public typealias Body = Swift.Never
  public typealias Coordinator = Swift.Void
  public typealias UIViewType = WebKit.WKWebView
}
@_Concurrency.MainActor @preconcurrency public struct TextSelectView : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public init(text: Swift.String)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s8DarockUI14TextSelectViewV4bodyQrvp", 0) __
}
@_Concurrency.MainActor @preconcurrency public struct CopyableView<V> : SwiftUICore.View where V : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public init(_ content: Swift.String, allowSelect: Swift.Bool = true, view: @escaping () -> V)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s8DarockUI12CopyableViewV4bodyQrvp", 0) __<V>
}
extension SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public func onPressChange(_ action: @escaping (Swift.Bool) -> Swift.Void) -> some SwiftUICore.View
  
}
@_Concurrency.MainActor @preconcurrency public struct ButtonStyleForPressAction : SwiftUI.ButtonStyle {
  @_Concurrency.MainActor @preconcurrency public init(pressAction: @escaping (Swift.Bool) -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency public func makeBody(configuration: DarockUI.ButtonStyleForPressAction.Configuration) -> some SwiftUICore.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s8DarockUI25ButtonStyleForPressActionV8makeBody13configurationQr05SwiftB00cD13ConfigurationV_tF", 0) __
}
extension SwiftUICore.Binding {
  public func onUpdate(_ closure: @escaping () -> Swift.Void) -> SwiftUICore.Binding<Value>
  public func onUpdate(_ closure: @escaping (_ oldValue: Value, _ newValue: Value) -> Swift.Void) -> SwiftUICore.Binding<Value>
}
extension SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public func border<S>(_ content: S, width: CoreFoundation.CGFloat = 1, cornerRadius: CoreFoundation.CGFloat) -> some SwiftUICore.View where S : SwiftUICore.ShapeStyle
  
}
extension SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public func withDismissButton(_ action: @escaping () -> Swift.Void, placement: SwiftUICore.HorizontalAlignment = .trailing) -> some SwiftUICore.View
  
}
extension SwiftUI.ScrollView {
  public func withScrollOffsetUpdate() -> some SwiftUICore.View
  
}
public struct ScrollViewOffsetPreferenceKey : SwiftUICore.PreferenceKey {
  public static var defaultValue: CoreFoundation.CGFloat
  public static func reduce(value: inout CoreFoundation.CGFloat, nextValue: () -> CoreFoundation.CGFloat)
  public typealias Value = CoreFoundation.CGFloat
}
extension SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public func reversedMask<Mask>(alignment: SwiftUICore.Alignment = .center, @SwiftUICore.ViewBuilder _ mask: () -> Mask) -> some SwiftUICore.View where Mask : SwiftUICore.View
  
}
extension DarockUI.NeumorphicKit.ColorSchemeType : Swift.Equatable {}
extension DarockUI.NeumorphicKit.ColorSchemeType : Swift.Hashable {}
extension DarockUI.SoftButtonPressedEffect : Swift.Equatable {}
extension DarockUI.SoftButtonPressedEffect : Swift.Hashable {}
extension DarockUI.SoftDynamicButtonStyle : Swift.Sendable {}
@available(*, deprecated, message: "Use SoftDynamicButtonStyle instead")
extension DarockUI.SoftButtonStyle : Swift.Sendable {}
extension DarockUI.SoftDynamicToggleStyle : Swift.Sendable {}
extension DarockUI.SoftSwitchToggleStyle : Swift.Sendable {}
extension DarockUI.UIAlert.AlertViewStyle : Swift.Equatable {}
extension DarockUI.UIAlert.AlertViewStyle : Swift.Hashable {}
extension DarockUI.UIAlert.AlertHaptic : Swift.Equatable {}
extension DarockUI.UIAlert.AlertHaptic : Swift.Hashable {}
extension DarockUI.DelayedProgressView : Swift.Sendable {}
extension DarockUI._InitialAppearModifier : Swift.Sendable {}
extension DarockUI.Zoomable : Swift.Sendable {}
extension DarockUI.WebView : Swift.Sendable {}
extension DarockUI.TextSelectView : Swift.Sendable {}
extension DarockUI.CopyableView : Swift.Sendable {}
extension DarockUI.ButtonStyleForPressAction : Swift.Sendable {}
