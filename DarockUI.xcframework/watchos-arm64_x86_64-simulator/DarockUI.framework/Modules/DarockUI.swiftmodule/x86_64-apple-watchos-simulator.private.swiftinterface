// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.3 effective-5.10 (swiftlang-6.0.3.1.10 clang-1600.0.30.1)
// swift-module-flags: -target x86_64-apple-watchos9.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name DarockUI
@_exported import DarockUI
import Foundation
import Swift
import SwiftUI
import WatchKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import _WatchKit_SwiftUI
extension SwiftUICore.Color {
  public struct Neumorphic {
    public static var colorSchemeType: DarockUI.NeumorphicKit.ColorSchemeType {
      get
      set
    }
    public static var main: SwiftUICore.Color {
      get
    }
    public static var secondary: SwiftUICore.Color {
      get
    }
    public static var lightShadow: SwiftUICore.Color {
      get
    }
    public static var darkShadow: SwiftUICore.Color {
      get
    }
  }
}
public struct NeumorphicKit {
  public enum ColorSchemeType {
    case auto, light, dark
    public static func == (a: DarockUI.NeumorphicKit.ColorSchemeType, b: DarockUI.NeumorphicKit.ColorSchemeType) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public static var colorSchemeType: DarockUI.NeumorphicKit.ColorSchemeType
  public typealias ColorType = UIKit.UIColor
  public static func colorType(red: CoreFoundation.CGFloat, green: CoreFoundation.CGFloat, blue: CoreFoundation.CGFloat) -> DarockUI.NeumorphicKit.ColorType
  public static func color(light: DarockUI.NeumorphicKit.ColorType, dark: DarockUI.NeumorphicKit.ColorType) -> SwiftUICore.Color
}
public enum SoftButtonPressedEffect {
  case none
  case flat
  case hard
  public static func == (a: DarockUI.SoftButtonPressedEffect, b: DarockUI.SoftButtonPressedEffect) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_Concurrency.MainActor @preconcurrency public struct SoftDynamicButtonStyle<S> : SwiftUI.ButtonStyle where S : SwiftUICore.Shape {
  @_Concurrency.MainActor @preconcurrency public init(_ shape: S, mainColor: SwiftUICore.Color, textColor: SwiftUICore.Color, darkShadowColor: SwiftUICore.Color, lightShadowColor: SwiftUICore.Color, pressedEffect: DarockUI.SoftButtonPressedEffect, padding: CoreFoundation.CGFloat = 16)
  @_Concurrency.MainActor @preconcurrency public func makeBody(configuration: DarockUI.SoftDynamicButtonStyle<S>.Configuration) -> some SwiftUICore.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s8DarockUI22SoftDynamicButtonStyleV8makeBody13configurationQr05SwiftB00eF13ConfigurationV_tF", 0) __<S>
}
@available(*, deprecated, message: "Use SoftDynamicButtonStyle instead")
@_Concurrency.MainActor @preconcurrency public struct SoftButtonStyle<S> : SwiftUI.ButtonStyle where S : SwiftUICore.Shape {
  @_Concurrency.MainActor @preconcurrency public init(_ shape: S, mainColor: SwiftUICore.Color, textColor: SwiftUICore.Color, darkShadowColor: SwiftUICore.Color, lightShadowColor: SwiftUICore.Color)
  @_Concurrency.MainActor @preconcurrency public func makeBody(configuration: DarockUI.SoftButtonStyle<S>.Configuration) -> some SwiftUICore.View
  
  @available(*, deprecated, message: "Use SoftDynamicButtonStyle instead")
  public typealias Body = @_opaqueReturnTypeOf("$s8DarockUI15SoftButtonStyleV8makeBody13configurationQr05SwiftB00dE13ConfigurationV_tF", 0) __<S>
}
extension SwiftUI.Button {
  public func softButtonStyle<S>(_ content: S, padding: CoreFoundation.CGFloat = 16, mainColor: SwiftUICore.Color = Color.Neumorphic.main, textColor: SwiftUICore.Color = Color.Neumorphic.secondary, darkShadowColor: SwiftUICore.Color = Color.Neumorphic.darkShadow, lightShadowColor: SwiftUICore.Color = Color.Neumorphic.lightShadow, pressedEffect: DarockUI.SoftButtonPressedEffect = .hard) -> some SwiftUICore.View where S : SwiftUICore.Shape
  
}
extension SwiftUI.NavigationLink {
  public func softNavigationLinkStyle<S>(_ content: S, padding: CoreFoundation.CGFloat = 16, mainColor: SwiftUICore.Color = Color.Neumorphic.main, textColor: SwiftUICore.Color = Color.Neumorphic.secondary, darkShadowColor: SwiftUICore.Color = Color.Neumorphic.darkShadow, lightShadowColor: SwiftUICore.Color = Color.Neumorphic.lightShadow, pressedEffect: DarockUI.SoftButtonPressedEffect = .hard) -> some SwiftUICore.View where S : SwiftUICore.Shape
  
}
@_Concurrency.MainActor @preconcurrency public struct SoftDynamicToggleStyle<S> : SwiftUI.ToggleStyle where S : SwiftUICore.Shape {
  @_Concurrency.MainActor @preconcurrency public init(_ shape: S, mainColor: SwiftUICore.Color, textColor: SwiftUICore.Color, darkShadowColor: SwiftUICore.Color, lightShadowColor: SwiftUICore.Color, pressedEffect: DarockUI.SoftButtonPressedEffect, padding: CoreFoundation.CGFloat = 16)
  @_Concurrency.MainActor @preconcurrency public func makeBody(configuration: DarockUI.SoftDynamicToggleStyle<S>.Configuration) -> some SwiftUICore.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s8DarockUI22SoftDynamicToggleStyleV8makeBody13configurationQr05SwiftB00eF13ConfigurationV_tF", 0) __<S>
}
@_Concurrency.MainActor @preconcurrency public struct SoftSwitchToggleStyle : SwiftUI.ToggleStyle {
  @_Concurrency.MainActor @preconcurrency public func makeBody(configuration: DarockUI.SoftSwitchToggleStyle.Configuration) -> some SwiftUICore.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s8DarockUI21SoftSwitchToggleStyleV8makeBody13configurationQr05SwiftB00eF13ConfigurationV_tF", 0) __
}
extension SwiftUI.Toggle {
  public func softToggleStyle<S>(_ content: S, padding: CoreFoundation.CGFloat = 16, mainColor: SwiftUICore.Color = Color.Neumorphic.main, textColor: SwiftUICore.Color = Color.Neumorphic.secondary, darkShadowColor: SwiftUICore.Color = Color.Neumorphic.darkShadow, lightShadowColor: SwiftUICore.Color = Color.Neumorphic.lightShadow, pressedEffect: DarockUI.SoftButtonPressedEffect = .hard) -> some SwiftUICore.View where S : SwiftUICore.Shape
  
  public func softSwitchToggleStyle(tint: SwiftUICore.Color = .green, offTint: SwiftUICore.Color = Color.Neumorphic.main, mainColor: SwiftUICore.Color = Color.Neumorphic.main, darkShadowColor: SwiftUICore.Color = Color.Neumorphic.darkShadow, lightShadowColor: SwiftUICore.Color = Color.Neumorphic.lightShadow, labelsHidden: Swift.Bool = false) -> some SwiftUICore.View
  
}
extension SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public func softInnerShadow<S>(_ content: S, darkShadow: SwiftUICore.Color = Color.Neumorphic.darkShadow, lightShadow: SwiftUICore.Color = Color.Neumorphic.lightShadow, spread: CoreFoundation.CGFloat = 0.5, radius: CoreFoundation.CGFloat = 10) -> some SwiftUICore.View where S : SwiftUICore.Shape
  
}
extension SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public func softOuterShadow(darkShadow: SwiftUICore.Color = Color.Neumorphic.darkShadow, lightShadow: SwiftUICore.Color = Color.Neumorphic.lightShadow, offset: CoreFoundation.CGFloat = 6, radius: CoreFoundation.CGFloat = 3) -> some SwiftUICore.View
  
}
public func NeuInput(_ placeholder: Swift.String, icon: Swift.String, text: SwiftUICore.Binding<Swift.String>, password: Swift.Bool = false, paddings: [CoreFoundation.CGFloat] = [5, 20], noAutoInput: Swift.Bool = false) -> some SwiftUICore.View

public func NeuButton(action: @escaping () -> Swift.Void, label: SwiftUICore.LocalizedStringKey, icon: Swift.String? = nil, cornerRadius: CoreFoundation.CGFloat = 18, paddings: [CoreFoundation.CGFloat] = [5, 20], fontSize: CoreFoundation.CGFloat = 22, fontWeight: SwiftUICore.Font.Weight = .bold, width: CoreFoundation.CGFloat? = nil) -> some SwiftUICore.View

@_disfavoredOverload public func NeuButton(action: @escaping () -> Swift.Void, label: Swift.String, icon: Swift.String? = nil, cornerRadius: CoreFoundation.CGFloat = 18, paddings: [CoreFoundation.CGFloat] = [5, 20], fontSize: CoreFoundation.CGFloat = 22, fontWeight: SwiftUICore.Font.Weight = .bold, width: CoreFoundation.CGFloat? = nil) -> some SwiftUICore.View

public func NeuButton(action: @escaping () -> Swift.Void, label: () -> some View, cornerRadius: CoreFoundation.CGFloat = 18, paddings: [CoreFoundation.CGFloat] = [5, 20], fontSize: CoreFoundation.CGFloat = 22, fontWeight: SwiftUICore.Font.Weight = .bold, width: CoreFoundation.CGFloat? = nil) -> some SwiftUICore.View

public func NStack(_ main: () -> some View) -> some SwiftUICore.View

public func NeuText(_ text: SwiftUICore.LocalizedStringKey, fontSize: CoreFoundation.CGFloat = 22) -> some SwiftUICore.View

@_disfavoredOverload public func NeuText(_ text: Swift.String, fontSize: CoreFoundation.CGFloat = 22) -> some SwiftUICore.View

public func NeuProgressView(value: Swift.Float, total: Swift.Float = 1.0, foregroundColor fc: SwiftUICore.Color = .blue, width: CoreFoundation.CGFloat? = 200, height: CoreFoundation.CGFloat? = 15) -> some SwiftUICore.View

public func NeuToggle(_ titleKey: SwiftUICore.LocalizedStringKey, isOn: SwiftUICore.Binding<Swift.Bool>, tint: SwiftUICore.Color = .green) -> some SwiftUICore.View

@_disfavoredOverload public func NeuToggle(isOn: SwiftUICore.Binding<Swift.Bool>, label: () -> some View, tint: SwiftUICore.Color = .green) -> some SwiftUICore.View

public func NeuNavigationLink(@SwiftUICore.ViewBuilder destination: () -> some View, @SwiftUICore.ViewBuilder label: () -> some View, cornerRadius: CoreFoundation.CGFloat = 18, paddings: [CoreFoundation.CGFloat] = [5, 20], width: CoreFoundation.CGFloat? = nil) -> some SwiftUICore.View

extension SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public func centerAligned() -> some SwiftUICore.View
  
}
extension SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public func noAutoInput() -> some SwiftUICore.View
  
}
@_Concurrency.MainActor @preconcurrency public struct VolumeControlView : SwiftUI.WKInterfaceObjectRepresentable {
  @_Concurrency.MainActor @preconcurrency public init()
  public typealias WKInterfaceObjectType = WatchKit.WKInterfaceVolumeControl
  @_Concurrency.MainActor @preconcurrency public func makeWKInterfaceObject(context: SwiftUI.WKInterfaceObjectRepresentableContext<DarockUI.VolumeControlView>) -> WatchKit.WKInterfaceVolumeControl
  @_Concurrency.MainActor @preconcurrency public func updateWKInterfaceObject(_ map: WatchKit.WKInterfaceVolumeControl, context: SwiftUI.WKInterfaceObjectRepresentableContext<DarockUI.VolumeControlView>)
  public typealias Body = Swift.Never
  public typealias Coordinator = Swift.Void
}
@_Concurrency.MainActor @preconcurrency public struct Zoomable : SwiftUICore.ViewModifier {
  @_Concurrency.MainActor @preconcurrency public init()
  @_Concurrency.MainActor @preconcurrency public func body(content: DarockUI.Zoomable.Content) -> some SwiftUICore.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s8DarockUI8ZoomableV4body7contentQr05SwiftB021_ViewModifier_ContentVyACG_tF", 0) __
}
extension SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public func onPressChange(_ action: @escaping (Swift.Bool) -> Swift.Void) -> some SwiftUICore.View
  
}
@_Concurrency.MainActor @preconcurrency public struct ButtonStyleForPressAction : SwiftUI.ButtonStyle {
  @_Concurrency.MainActor @preconcurrency public init(pressAction: @escaping (Swift.Bool) -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency public func makeBody(configuration: DarockUI.ButtonStyleForPressAction.Configuration) -> some SwiftUICore.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s8DarockUI25ButtonStyleForPressActionV8makeBody13configurationQr05SwiftB00cD13ConfigurationV_tF", 0) __
}
extension SwiftUICore.Binding {
  public func onUpdate(_ closure: @escaping () -> Swift.Void) -> SwiftUICore.Binding<Value>
  public func onUpdate(_ closure: @escaping (_ oldValue: Value, _ newValue: Value) -> Swift.Void) -> SwiftUICore.Binding<Value>
}
extension SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public func border<S>(_ content: S, width: CoreFoundation.CGFloat = 1, cornerRadius: CoreFoundation.CGFloat) -> some SwiftUICore.View where S : SwiftUICore.ShapeStyle
  
}
extension SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public func withDismissButton(_ action: @escaping () -> Swift.Void, placement: SwiftUICore.HorizontalAlignment = .trailing) -> some SwiftUICore.View
  
}
extension SwiftUI.ScrollView {
  public func withScrollOffsetUpdate() -> some SwiftUICore.View
  
}
public struct ScrollViewOffsetPreferenceKey : SwiftUICore.PreferenceKey {
  public static var defaultValue: CoreFoundation.CGFloat
  public static func reduce(value: inout CoreFoundation.CGFloat, nextValue: () -> CoreFoundation.CGFloat)
  public typealias Value = CoreFoundation.CGFloat
}
extension SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public func wrapIf(_ condition: Swift.Bool, @SwiftUICore.ViewBuilder in container: (Self) -> some View) -> some SwiftUICore.View
  
  @_Concurrency.MainActor @preconcurrency public func wrapIf(_ condition: Swift.Bool, @SwiftUICore.ViewBuilder in container: (Self) -> some View, @SwiftUICore.ViewBuilder else elseContainer: (Self) -> some View) -> some SwiftUICore.View
  
}
extension DarockUI.NeumorphicKit.ColorSchemeType : Swift.Equatable {}
extension DarockUI.NeumorphicKit.ColorSchemeType : Swift.Hashable {}
extension DarockUI.SoftButtonPressedEffect : Swift.Equatable {}
extension DarockUI.SoftButtonPressedEffect : Swift.Hashable {}
extension DarockUI.SoftDynamicButtonStyle : Swift.Sendable {}
@available(*, deprecated, message: "Use SoftDynamicButtonStyle instead")
extension DarockUI.SoftButtonStyle : Swift.Sendable {}
extension DarockUI.SoftDynamicToggleStyle : Swift.Sendable {}
extension DarockUI.SoftSwitchToggleStyle : Swift.Sendable {}
extension DarockUI.VolumeControlView : Swift.Sendable {}
extension DarockUI.Zoomable : Swift.Sendable {}
extension DarockUI.ButtonStyleForPressAction : Swift.Sendable {}
